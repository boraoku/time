<!DOCTYPE html>
<html>
<head>
  <title>TiME</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
  
  <!-- Open Graph / Social Media Meta Tags -->
  <meta property="og:title" content="TiME - Synch your watches!">
  <meta property="og:description" content="A radical retro-styled time zone converter with 1200+ cities and 80s synthwave vibes">
  <meta property="og:image" content="/icon-512.png">
  <meta property="og:type" content="website">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="TiME - Synch your watches!">
  <meta name="twitter:description" content="A radical retro-styled time zone converter with 1200+ cities">
  <meta name="twitter:image" content="/icon-512.png">
  
  <!-- Additional SEO -->
  <meta name="description" content="Convert time zones instantly with our retro 80s-styled time converter. Support for 1200+ cities worldwide. Just type like you speak: '3:30pm new york in tokyo, paris'">
  <meta name="keywords" content="time zone converter, world clock, time sync, timezone, time converter, international time">
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&display=swap');
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Orbitron', monospace;
      background: #0a0a0a;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
      position: relative;
      overflow-x: hidden;
    }

    body::before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: 
        linear-gradient(180deg, transparent 0%, rgba(0, 255, 100, 0.1) 100%),
        linear-gradient(90deg, transparent 0%, rgba(0, 255, 100, 0.05) 100%);
      pointer-events: none;
      z-index: 1;
    }

    body::after {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-image: 
        repeating-linear-gradient(
          0deg,
          transparent,
          transparent 2px,
          rgba(0, 255, 100, 0.03) 2px,
          rgba(0, 255, 100, 0.03) 4px
        ),
        repeating-linear-gradient(
          90deg,
          transparent,
          transparent 2px,
          rgba(0, 255, 100, 0.03) 2px,
          rgba(0, 255, 100, 0.03) 4px
        );
      pointer-events: none;
      z-index: 1;
    }

    .grid-floor {
      position: fixed;
      bottom: 0;
      left: -50%;
      right: -50%;
      height: 40%;
      background-image: 
        linear-gradient(rgba(0, 255, 100, 0.5) 2px, transparent 2px),
        linear-gradient(90deg, rgba(0, 255, 100, 0.5) 2px, transparent 2px);
      background-size: 50px 50px;
      background-position: center center;
      transform: perspective(200px) rotateX(60deg);
      pointer-events: none;
      z-index: 0;
    }

    .container {
      
      border: 3px solid #00ff66;
      border-radius: 0;
      box-shadow: 
        0 0 40px rgba(0, 255, 100, 0.5),
        0 0 80px rgba(0, 255, 100, 0.3),
        inset 0 0 40px rgba(0, 255, 100, 0.1);
      padding: 40px;
      width: 100%;
      max-width: 1200px;
      position: relative;
      z-index: 2;
    }

    .container::before {
      content: '';
      position: absolute;
      top: -2px;
      left: -2px;
      right: -2px;
      bottom: -2px;
      background: linear-gradient(45deg, #00ff66, #00ff66, #00ff66, #00ff66);
      z-index: -1;
      animation: neonBorder 3s linear infinite;
    }

    @keyframes neonBorder {
      0%, 100% { opacity: 0.8; }
      50% { opacity: 0.5; }
    }

    h1 {
      background: linear-gradient(90deg, #00ff66 0%, #00ff66 25%, #88ff00 50%, #00ff66 75%, #00ff66 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      text-align: center;
      margin-bottom: 30px;
      font-size: 3em;
      font-weight: 900;
      text-transform: uppercase;
      letter-spacing: 5px;
      text-shadow: 
        0 0 10px rgba(0, 255, 100, 0.2),
        0 0 20px rgba(0, 255, 100, 0.2),
        0 0 30px rgba(0, 255, 100, 0.2);
      animation: glowPulse 2s ease-in-out infinite;
    }

    @keyframes glowPulse {
      0%, 100% { filter: brightness(1); }
      50% { filter: brightness(1.02); }
    }

    .subtitle {
      text-align: center;
      color: #00ff66;
      font-size: 0.9em;
      margin-top: -20px;
      margin-bottom: 30px;
      letter-spacing: 10px;
      text-transform: uppercase;
      opacity: 0.8;
    }

    .input-section {
      margin-bottom: 25px;
    }

    .input-wrapper {
      position: relative;
      margin-bottom: 20px;
    }

    input[type="text"] {
      width: 100%;
      padding: 15px 20px;
      font-size: 16px;
      font-family: 'Orbitron', monospace;
      background: rgba(0, 0, 0, 0.8);
      border: 2px solid #00ff66;
      color: #00ff66;
      text-transform: uppercase;
      letter-spacing: 2px;
      transition: all 0.3s ease;
      outline: none;
      box-shadow: 
        inset 0 0 20px rgba(0, 255, 100, 0.1),
        0 0 20px rgba(0, 255, 100, 0.3);
      resize: none;
      overflow: hidden;
      line-height: 1.4;
      -webkit-appearance: none; /* Remove iOS default styling */
      -moz-appearance: none;
      appearance: none;
      border-radius: 0; /* Remove iOS default border radius */
    }

    input[type="text"]:focus {
      border-color: #00ff66;
      box-shadow: 
        inset 0 0 20px rgba(0, 255, 100, 0.2),
        0 0 30px rgba(0, 255, 100, 0.5);
      background: rgba(0, 0, 0, 0.9);
    }

    input[type="text"]::placeholder {
      color: rgba(0, 255, 100, 0.5);
      text-transform: none;
      letter-spacing: 1px;
    }

    .submit-btn {
      background: linear-gradient(45deg, #00ff66 0%, #00ff66 100%);
      color: #000;
      border: none;
      padding: 15px 40px;
      font-size: 18px;
      font-family: 'Orbitron', monospace;
      font-weight: 700;
      text-transform: uppercase;
      letter-spacing: 3px;
      cursor: pointer;
      transition: all 0.3s ease;
      display: block;
      margin: 0 auto;
      position: relative;
      overflow: hidden;
      box-shadow: 
        0 0 20px rgba(0, 255, 100, 0.5),
        0 0 40px rgba(0, 255, 100, 0.3);
    }

    .submit-btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
      transition: left 0.5s ease;
    }

    .submit-btn:hover::before {
      left: 100%;
    }

    .submit-btn:hover {
      transform: translateY(-2px) scale(1.05);
      box-shadow: 
        0 5px 30px rgba(0, 255, 100, 0.7),
        0 5px 50px rgba(0, 255, 100, 0.5);
    }

    .submit-btn:active {
      transform: translateY(0) scale(1);
    }

    .error-message {
      background: rgba(255, 0, 0, 0.2);
      border: 2px solid #ff0066;
      color: #ff66aa;
      padding: 15px;
      text-align: center;
      margin-bottom: 20px;
      text-transform: uppercase;
      letter-spacing: 2px;
      box-shadow: 
        0 0 20px rgba(255, 0, 102, 0.5),
        inset 0 0 20px rgba(255, 0, 102, 0.1);
    }

    .clocks-container {
      display: flex;
      flex-wrap: wrap;
      gap: 30px;
      justify-content: center;
      margin-top: 40px;
      animation: containerSlideIn 0.5s ease-out;
    }

    @keyframes containerSlideIn {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .clock-wrapper {
      display: flex;
      flex-direction: column;
      align-items: center;
      transition: all 0.6s cubic-bezier(0.4, 0.0, 0.2, 1);
      opacity: 1;
      transform: scale(1) translateX(0) translateY(0);
      position: relative;
    }

    .clock-wrapper.initial-appear {
      animation: clockAppear 0.8s cubic-bezier(0.34, 1.56, 0.64, 1) forwards,
                float 3s ease-in-out infinite 0.8s;
      opacity: 0;
      transform: scale(0) rotate(-180deg);
    }

    .clock-wrapper.slide-in {
      animation: slideInNew 0.6s cubic-bezier(0.34, 1.56, 0.64, 1) forwards,
                float 3s ease-in-out infinite 0.6s;
      opacity: 0;
      transform: translateX(100px) scale(0.8);
    }

    .clock-wrapper.slide-out {
      animation: slideOutOld 0.5s cubic-bezier(0.4, 0.0, 1, 1) forwards;
      pointer-events: none;
    }

    .clock-wrapper.existing {
      animation: float 3s ease-in-out infinite;
    }

    .clock-wrapper.reordering {
      transition: all 0.8s cubic-bezier(0.4, 0.0, 0.2, 1);
    }

    @keyframes clockAppear {
      0% {
        opacity: 0;
        transform: scale(0) rotate(-180deg);
      }
      50% {
        opacity: 0.5;
        transform: scale(1.1) rotate(10deg);
      }
      100% {
        opacity: 1;
        transform: scale(1) rotate(0deg);
      }
    }

    @keyframes slideInNew {
      0% {
        opacity: 0;
        transform: translateX(100px) scale(0.8);
      }
      100% {
        opacity: 1;
        transform: translateX(0) scale(1);
      }
    }

    @keyframes slideOutOld {
      0% {
        opacity: 1;
        transform: translateX(0) scale(1) rotate(0deg);
      }
      100% {
        opacity: 0;
        transform: translateX(-100px) scale(0.8) rotate(-10deg);
      }
    }

    @keyframes float {
      0%, 100% { transform: translateY(0) scale(1) rotate(0deg); }
      50% { transform: translateY(-10px) scale(1) rotate(0deg); }
    }

    .clock-hand-transition {
      transition: transform 1s cubic-bezier(0.4, 0.0, 0.2, 1) !important;
    }

    .clock-wrapper:hover {
      transform: scale(1.1) translateY(-5px);
    }

    .analog-clock {
      width: 175px;
      height: 175px;
      position: relative;
      margin-bottom: 15px;
    }

    .clock-face {
      width: 100%;
      height: 100%;
      border-radius: 50%;
      position: relative;
      transition: all 0.3s ease;
    }

    .clock-face.am {
      background: radial-gradient(circle at center, #00ff66 0%, #006633 50%, #001100 100%);
      border: 3px solid #00ff66;
      box-shadow: 
        0 0 40px rgba(0, 255, 100, 0.8),
        inset 0 0 30px rgba(0, 255, 100, 0.3),
        0 0 80px rgba(0, 255, 100, 0.4);
    }

    .clock-face.pm {
      background: radial-gradient(circle at center, #00ff66 0%, #336600 50%, #0a1a00 100%);
      border: 3px solid #00ff66;
      box-shadow: 
        0 0 40px rgba(0, 255, 100, 0.8),
        inset 0 0 30px rgba(0, 255, 100, 0.3),
        0 0 80px rgba(0, 255, 100, 0.4);
    }

    .clock-center {
      position: absolute;
      top: 50%;
      left: 50%;
      width: 12px;
      height: 12px;
      background: #88ff00;
      border-radius: 50%;
      transform: translate(-50%, -50%);
      z-index: 10;
      box-shadow: 
        0 0 20px rgba(136, 255, 0, 0.8),
        0 0 40px rgba(136, 255, 0, 0.5);
    }

    .hand {
      position: absolute;
      bottom: 50%;
      left: 50%;
      transform-origin: bottom center;
      border-radius: 3px;
      transition: transform 0.5s cubic-bezier(0.4, 0.0, 0.2, 1);
      animation: handPulse 1s ease-out 0.5s;
    }

    @keyframes handPulse {
      0% {
        filter: brightness(1);
      }
      50% {
        filter: brightness(1.5) drop-shadow(0 0 15px rgba(0, 255, 100, 1));
      }
      100% {
        filter: brightness(1);
      }
    }

    .hour-hand {
      width: 6px;
      height: 35px;
      margin-left: -3px;
    }

    .minute-hand {
      width: 4px;
      height: 45px;
      margin-left: -2px;
    }

    .am .hand {
      background: linear-gradient(to top, #00ff66, #ffffff);
      box-shadow: 0 0 10px rgba(0, 255, 100, 0.8);
    }

    .pm .hand {
      background: linear-gradient(to top, #00ff66, #ffffff);
      box-shadow: 0 0 10px rgba(0, 255, 100, 0.8);
    }

    .clock-number {
      position: absolute;
      font-size: 11px;
      font-weight: bold;
    }

    .am .clock-number {
      color: #00ff66;
      text-shadow: 0 0 5px rgba(0, 255, 100, 0.8);
    }

    .pm .clock-number {
      color: #00ff66;
      text-shadow: 0 0 5px rgba(0, 255, 100, 0.8);
    }

    .clock-number.twelve {
      top: 10px;
      left: 50%;
      transform: translateX(-50%);
    }

    .clock-number.three {
      top: 50%;
      right: 10px;
      transform: translateY(-50%);
    }

    .clock-number.six {
      bottom: 10px;
      left: 50%;
      transform: translateX(-50%);
    }

    .clock-number.nine {
      top: 50%;
      left: 10px;
      transform: translateY(-50%);
    }

    .city-name {
      font-size: 16px;
      font-weight: 700;
      color: #88ff00;
      margin-bottom: 5px;
      text-transform: uppercase;
      letter-spacing: 3px;
      text-shadow: 
        0 0 10px rgba(136, 255, 0, 0.8),
        0 0 20px rgba(136, 255, 0, 0.5);
    }

    .time-digital {
      font-size: 14px;
      color: #88ff00;
      font-variant-numeric: tabular-nums;
      letter-spacing: 2px;
      text-shadow: 0 0 10px rgba(0, 255, 100, 0.8);
    }

    .timezone-info {
      font-size: 11px;
      color: rgba(0, 255, 100, 0.8);
      margin-top: 3px;
      letter-spacing: 1px;
    }

    .example-text {
      text-align: left;
      color: rgba(0, 255, 100, 0.7);
      font-size: 10px;
      margin-top: 15px;
      margin-left: 15px;
      text-transform: uppercase;
      letter-spacing: 2px;
    }

    .example-link {
      color: rgba(0, 255, 100, 0.7);
      text-decoration: none;
      cursor: pointer;
      transition: all 0.3s ease;
      display: inline-block;
      position: relative;
    }

    .example-link:hover {
      color: #00ff66;
      text-shadow: 0 0 10px rgba(0, 255, 100, 0.8);
      transform: translateX(5px);
    }

    .example-link::before {
      content: '▸ ';
      color: #00ff66;
      margin-right: 5px;
      transition: all 0.3s ease;
    }

    .example-link:hover::before {
      transform: translateX(3px);
    }

    .scanlines {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      pointer-events: none;
      z-index: 9999;
      background: repeating-linear-gradient(
        0deg,
        rgba(0, 0, 0, 0.15),
        rgba(0, 0, 0, 0.15) 1px,
        transparent 1px,
        transparent 2px
      );
      animation: scanlines 8s linear infinite;
    }

    @keyframes scanlines {
      0% { transform: translateY(0); }
      100% { transform: translateY(10px); }
    }

    @media (max-width: 768px) {
      .container {
        padding: 30px 20px;
      }

      h1 {
        font-size: 2em;
        margin-bottom: 20px;
        letter-spacing: 3px;
      }

      .analog-clock {
        width: 140px;
        height: 140px;
      }

      .hour-hand {
        height: 25px;
      }

      .minute-hand {
        height: 35px;
      }

      .clock-number {
        font-size: 9px;
      }

      .city-name {
        font-size: 14px;
        letter-spacing: 2px;
      }

      .time-digital {
        font-size: 12px;
      }

      .clocks-container {
        gap: 20px;
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        justify-items: center;
      }

      input[type="text"] {
        font-size: 16px; /* Prevents iOS zoom */
        min-height: 45px;
        height: auto;
        padding: 10px 12px;
        -webkit-text-size-adjust: 100%; /* Prevent font scaling */
        transform: scale(0.875); /* Scale down visually if needed */
        transform-origin: left center;
        width: 114%; /* Compensate for scale */
      }

      .submit-btn {
        font-size: 16px;
        padding: 12px 30px;
      }
    }

    @media (max-width: 480px) {
      .clocks-container {
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
      }

      .analog-clock {
        width: 120px;
        height: 120px;
      }
      
      .clock-wrapper {
        max-width: 140px;
      }

      h1 {
        font-size: 1.5em;
        letter-spacing: 2px;
      }

      .subtitle {
        letter-spacing: 5px;
        font-size: 0.7em;
      }
    }
  </style>
</head>
<body>
  <div class="grid-floor"></div>
  <div class="scanlines"></div>
  
  <div class="container">
    <h1>Synch your watches!</h1>
    <div class="subtitle" id="subtitle">Not an hour sooner, not an hour later.</div>
    
    <div class="input-section">
      <%= form_with url: root_path, method: :get, local: true do |form| %>
        <div class="input-wrapper">
          <%= form.text_field :query, 
              value: @query, 
              placeholder: "Enter time query", 
              autocomplete: "off",
              autofocus: true,
              spellcheck: false %>
        </div>
      <% end %>
      
      <% unless @query.present? %>
        <div class="example-text">
          Type or click to try:<br>
          <br><a href="#" class="example-link" data-query="3:30pm new york in tokyo, paris">3:30pm new york in tokyo, paris</a><br>
          <br><a href="#" class="example-link" data-query="noon pst in est and gmt">noon pst in est and gmt</a><br>
          <br><a href="#" class="example-link" data-query="9am london in sydney and singapore">9am london in sydney and singapore</a><br>
          <br><a href="#" class="example-link" data-query="midnight utc in jst, ist and cet">midnight utc in jst, ist and cet</a>
        </div>
      <% end %>
    </div>

    <% if @error.present? %>
      <div class="error-message">
        ERROR: <%= @error %>
      </div>
    <% end %>

    <% if @results.present? %>
      <div class="clocks-container">
        <% @results.each do |result| %>
          <div class="clock-wrapper">
            <div class="analog-clock">
              <svg class="clock-face <%= result[:is_pm] ? 'pm' : 'am' %>" viewBox="0 0 150 150">
                <defs>
                  <filter id="glow">
                    <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
                    <feMerge>
                      <feMergeNode in="coloredBlur"/>
                      <feMergeNode in="SourceGraphic"/>
                    </feMerge>
                  </filter>
                </defs>
                
                <circle cx="75" cy="75" r="73" fill="none" />
                
                <% 12.times do |i| %>
                  <% angle = i * 30 %>
                  <% x1 = 75 + 60 * Math.sin(angle * Math::PI / 180) %>
                  <% y1 = 75 - 60 * Math.cos(angle * Math::PI / 180) %>
                  <% x2 = 75 + 65 * Math.sin(angle * Math::PI / 180) %>
                  <% y2 = 75 - 65 * Math.cos(angle * Math::PI / 180) %>
                  <line x1="<%= x1 %>" y1="<%= y1 %>" x2="<%= x2 %>" y2="<%= y2 %>" 
                        stroke="<%= result[:is_pm] ? '#66ff00' : '#00ff66' %>" 
                        stroke-width="<%= i % 3 == 0 ? '3' : '1' %>"
                        opacity="<%= i % 3 == 0 ? '1' : '0.5' %>"
                        filter="url(#glow)" />
                <% end %>
                
                <% hour_angle = ((result[:time].hour % 12) * 30 + result[:time].min * 0.5) - 90 %>
                <% minute_angle = result[:time].min * 6 - 90 %>
                
                <!-- Hour hand -->
                <line x1="75" y1="75" 
                      x2="<%= 75 + 35 * Math.cos(hour_angle * Math::PI / 180) %>" 
                      y2="<%= 75 + 35 * Math.sin(hour_angle * Math::PI / 180) %>"
                      stroke="<%= result[:is_pm] ? '#66ff00' : '#00ff66' %>" 
                      stroke-width="8"
                      stroke-linecap="round" />
                <line x1="75" y1="75" 
                      x2="<%= 75 + 35 * Math.cos(hour_angle * Math::PI / 180) %>" 
                      y2="<%= 75 + 35 * Math.sin(hour_angle * Math::PI / 180) %>"
                      stroke="<%= result[:is_pm] ? '#004400' : '#003333' %>" 
                      stroke-width="5"
                      stroke-linecap="round" />
                
                <!-- Minute hand -->
                <line x1="75" y1="75" 
                      x2="<%= 75 + 50 * Math.cos(minute_angle * Math::PI / 180) %>" 
                      y2="<%= 75 + 50 * Math.sin(minute_angle * Math::PI / 180) %>"
                      stroke="<%= result[:is_pm] ? '#66ff00' : '#00ff66' %>" 
                      stroke-width="8"
                      stroke-linecap="round" />
                <line x1="75" y1="75" 
                      x2="<%= 75 + 50 * Math.cos(minute_angle * Math::PI / 180) %>" 
                      y2="<%= 75 + 50 * Math.sin(minute_angle * Math::PI / 180) %>"
                      stroke="<%= result[:is_pm] ? '#004400' : '#003333' %>" 
                      stroke-width="5"
                      stroke-linecap="round" />
                
                <circle cx="75" cy="75" r="5" fill="#88ff00" filter="url(#glow)" />
                
                <text x="75" y="20" text-anchor="middle" 
                      fill="<%= result[:is_pm] ? '#66ff00' : '#00ff66' %>" 
                      font-size="12" font-weight="bold" font-family="Orbitron">XII</text>
                <text x="130" y="78" text-anchor="middle" 
                      fill="<%= result[:is_pm] ? '#66ff00' : '#00ff66' %>" 
                      font-size="12" font-weight="bold" font-family="Orbitron">III</text>
                <text x="75" y="135" text-anchor="middle" 
                      fill="<%= result[:is_pm] ? '#66ff00' : '#00ff66' %>" 
                      font-size="12" font-weight="bold" font-family="Orbitron">VI</text>
                <text x="20" y="78" text-anchor="middle" 
                      fill="<%= result[:is_pm] ? '#66ff00' : '#00ff66' %>" 
                      font-size="12" font-weight="bold" font-family="Orbitron">IX</text>
              </svg>
            </div>
            
            <div class="city-name"><%= result[:city] %></div>
            <div class="time-digital">
              <%= result[:time].strftime("%l:%M %p").strip %>
            </div>
            <div class="timezone-info">
              <%= result[:offset] %>
            </div>
          </div>
        <% end %>
      </div>
    <% end %>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Doc Brown quotes
      const docQuotes = [
        "Not an hour sooner, not an hour later.",
        "Gonna build a time machine? Do it with some style!",
        "If my calculations are correct...",
        "Great Scott!",
        "Roads? Where we're going, we don't need roads.",
        "That's what Doc says!",
        "Your future is whatever you make it.",
        "Time circuits on. Flux capacitor... fluxing."
      ];
      
      // Rotate subtitle quotes
      const subtitle = document.getElementById('subtitle');
      if (subtitle) {
        // Start from a random index
        let currentQuoteIndex = Math.floor(Math.random() * docQuotes.length);
        
        // Set initial random quote immediately
        subtitle.textContent = docQuotes[currentQuoteIndex];
        
        // Change quote every 3 seconds
        setInterval(function() {
          currentQuoteIndex = (currentQuoteIndex + 1) % docQuotes.length;
          subtitle.style.opacity = '0';
          
          setTimeout(function() {
            subtitle.textContent = docQuotes[currentQuoteIndex];
            subtitle.style.opacity = '0.8';
          }, 300);
        }, 3000);
        
        // Add transition for smooth fade
        subtitle.style.transition = 'opacity 0.3s ease';
      }
      
      // Track current cities and their states
      let currentCities = new Map();
      let isFirstQuery = true;
      
      // Function to create clock HTML with proper data attributes
      function createClockHTML(result, animationClass = '') {
        const hourAngle = ((result.hour % 12) * 30 + result.minute * 0.5) - 90;
        const minuteAngle = result.minute * 6 - 90;
        const isPm = result.is_pm;
        
        return `
          <div class="clock-wrapper ${animationClass}" data-city="${result.city.toLowerCase()}">
            <div class="analog-clock">
              <svg class="clock-face ${isPm ? 'pm' : 'am'}" viewBox="0 0 150 150">
                <defs>
                  <filter id="glow">
                    <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
                    <feMerge>
                      <feMergeNode in="coloredBlur"/>
                      <feMergeNode in="SourceGraphic"/>
                    </feMerge>
                  </filter>
                </defs>
                
                <circle cx="75" cy="75" r="73" fill="none" />
                
                ${Array.from({length: 12}, (_, i) => {
                  const angle = i * 30;
                  const x1 = 75 + 60 * Math.sin(angle * Math.PI / 180);
                  const y1 = 75 - 60 * Math.cos(angle * Math.PI / 180);
                  const x2 = 75 + 65 * Math.sin(angle * Math.PI / 180);
                  const y2 = 75 - 65 * Math.cos(angle * Math.PI / 180);
                  return `<line x1="${x1}" y1="${y1}" x2="${x2}" y2="${y2}" 
                        stroke="${isPm ? '#66ff00' : '#00ff66'}" 
                        stroke-width="${i % 3 === 0 ? '3' : '1'}"
                        opacity="${i % 3 === 0 ? '1' : '0.5'}"
                        filter="url(#glow)" />`;
                }).join('')}
                
                <!-- Hour hand -->
                <line class="hour-hand-line clock-hand-transition" x1="75" y1="75" 
                      x2="${75 + 35 * Math.cos(hourAngle * Math.PI / 180)}" 
                      y2="${75 + 35 * Math.sin(hourAngle * Math.PI / 180)}"
                      stroke="${isPm ? '#66ff00' : '#00ff66'}" 
                      stroke-width="8"
                      stroke-linecap="round"
                      data-angle="${hourAngle}" />
                <line class="hour-hand-line-inner clock-hand-transition" x1="75" y1="75" 
                      x2="${75 + 35 * Math.cos(hourAngle * Math.PI / 180)}" 
                      y2="${75 + 35 * Math.sin(hourAngle * Math.PI / 180)}"
                      stroke="${isPm ? '#004400' : '#003333'}" 
                      stroke-width="5"
                      stroke-linecap="round" />
                
                <!-- Minute hand -->
                <line class="minute-hand-line clock-hand-transition" x1="75" y1="75" 
                      x2="${75 + 50 * Math.cos(minuteAngle * Math.PI / 180)}" 
                      y2="${75 + 50 * Math.sin(minuteAngle * Math.PI / 180)}"
                      stroke="${isPm ? '#66ff00' : '#00ff66'}" 
                      stroke-width="8"
                      stroke-linecap="round"
                      data-angle="${minuteAngle}" />
                <line class="minute-hand-line-inner clock-hand-transition" x1="75" y1="75" 
                      x2="${75 + 50 * Math.cos(minuteAngle * Math.PI / 180)}" 
                      y2="${75 + 50 * Math.sin(minuteAngle * Math.PI / 180)}"
                      stroke="${isPm ? '#004400' : '#003333'}" 
                      stroke-width="5"
                      stroke-linecap="round" />
                
                <circle cx="75" cy="75" r="5" fill="#88ff00" filter="url(#glow)" />
                
                <text x="75" y="20" text-anchor="middle" 
                      fill="${isPm ? '#66ff00' : '#00ff66'}" 
                      font-size="12" font-weight="bold" font-family="Orbitron">XII</text>
                <text x="130" y="78" text-anchor="middle" 
                      fill="${isPm ? '#66ff00' : '#00ff66'}" 
                      font-size="12" font-weight="bold" font-family="Orbitron">III</text>
                <text x="75" y="135" text-anchor="middle" 
                      fill="${isPm ? '#66ff00' : '#00ff66'}" 
                      font-size="12" font-weight="bold" font-family="Orbitron">VI</text>
                <text x="20" y="78" text-anchor="middle" 
                      fill="${isPm ? '#66ff00' : '#00ff66'}" 
                      font-size="12" font-weight="bold" font-family="Orbitron">IX</text>
              </svg>
            </div>
            
            <div class="city-name">${result.city}</div>
            <div class="time-digital">${result.time}</div>
            <div class="timezone-info">${result.offset}</div>
          </div>
        `;
      }
      
      // Function to update existing clock hands
      function updateClockHands(clockElement, result) {
        const hourAngle = ((result.hour % 12) * 30 + result.minute * 0.5) - 90;
        const minuteAngle = result.minute * 6 - 90;
        const isPm = result.is_pm;
        
        // Update hour hands
        const hourHands = clockElement.querySelectorAll('.hour-hand-line, .hour-hand-line-inner');
        hourHands.forEach(hand => {
          hand.setAttribute('x2', 75 + 35 * Math.cos(hourAngle * Math.PI / 180));
          hand.setAttribute('y2', 75 + 35 * Math.sin(hourAngle * Math.PI / 180));
        });
        
        // Update minute hands
        const minuteHands = clockElement.querySelectorAll('.minute-hand-line, .minute-hand-line-inner');
        minuteHands.forEach(hand => {
          hand.setAttribute('x2', 75 + 50 * Math.cos(minuteAngle * Math.PI / 180));
          hand.setAttribute('y2', 75 + 50 * Math.sin(minuteAngle * Math.PI / 180));
        });
        
        // Update clock face color
        const clockFace = clockElement.querySelector('.clock-face');
        clockFace.className = `clock-face ${isPm ? 'pm' : 'am'}`;
        
        // Update digital time
        clockElement.querySelector('.time-digital').textContent = result.time;
        clockElement.querySelector('.timezone-info').textContent = result.offset;
      }
      
      // Handle form submission via AJAX
      const queryInput = document.querySelector('input[name="query"]');
      const form = document.querySelector('form');
      
      function performSearch(query) {
        // Hide examples if shown
        const exampleText = document.querySelector('.example-text');
        if (exampleText) {
          exampleText.style.display = 'none';
        }
        
        // Clear any existing error
        const existingError = document.querySelector('.error-message');
        if (existingError) {
          existingError.remove();
        }
        
        if (!query) {
          // Clear all clocks with slide-out animation
          const clocksContainer = document.querySelector('.clocks-container');
          if (clocksContainer) {
            const clocks = clocksContainer.querySelectorAll('.clock-wrapper');
            clocks.forEach((clock, index) => {
              setTimeout(() => {
                clock.classList.add('slide-out');
              }, index * 50);
            });
            
            setTimeout(() => {
              clocksContainer.remove();
              currentCities.clear();
              isFirstQuery = true;
            }, 600);
          }
          
          // Show examples again if query is empty
          if (exampleText) {
            exampleText.style.display = 'block';
          }
          return;
        }
        
        // Make AJAX request
        fetch(`/?query=${encodeURIComponent(query)}`, {
          headers: {
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            // Show error message
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error-message';
            errorDiv.textContent = 'ERROR: ' + data.error;
            const inputSection = document.querySelector('.input-section');
            inputSection.insertAdjacentElement('afterend', errorDiv);
          } else if (data.results && data.results.length > 0) {
            let clocksContainer = document.querySelector('.clocks-container');
            
            // Create new cities map
            const newCities = new Map();
            data.results.forEach(result => {
              newCities.set(result.city.toLowerCase(), result);
            });
            
            if (!clocksContainer) {
              // First time or after clearing - create container
              clocksContainer = document.createElement('div');
              clocksContainer.className = 'clocks-container';
              
              // Add all clocks with initial animation
              const clocksHTML = data.results.map((result, index) => {
                const animClass = isFirstQuery ? 'initial-appear' : 'slide-in';
                // Add staggered delay
                const delay = index * 0.1;
                return createClockHTML(result, animClass).replace('clock-wrapper', 
                  `clock-wrapper" style="animation-delay: ${delay}s, ${0.8 + delay}s`);
              }).join('');
              
              clocksContainer.innerHTML = clocksHTML;
              document.querySelector('.container').appendChild(clocksContainer);
              
              currentCities = newCities;
              isFirstQuery = false;
            } else {
              // Update existing container
              const existingClocks = clocksContainer.querySelectorAll('.clock-wrapper');
              const processedCities = new Set();
              
              // First, update or remove existing clocks
              existingClocks.forEach(clock => {
                const cityName = clock.dataset.city;
                
                if (newCities.has(cityName)) {
                  // City still exists - update clock hands
                  clock.classList.remove('initial-appear', 'slide-in', 'slide-out');
                  clock.classList.add('existing');
                  updateClockHands(clock, newCities.get(cityName));
                  processedCities.add(cityName);
                } else {
                  // City removed - slide out
                  clock.classList.add('slide-out');
                  setTimeout(() => clock.remove(), 500);
                }
              });
              
              // Add new cities
              let newClocksHTML = '';
              let newClockIndex = 0;
              newCities.forEach((result, cityName) => {
                if (!processedCities.has(cityName)) {
                  const delay = newClockIndex * 0.1;
                  newClocksHTML += createClockHTML(result, 'slide-in')
                    .replace('clock-wrapper', 
                      `clock-wrapper" style="animation-delay: ${delay}s, ${0.6 + delay}s`);
                  newClockIndex++;
                }
              });
              
              if (newClocksHTML) {
                clocksContainer.insertAdjacentHTML('beforeend', newClocksHTML);
              }
              
              // Reorder clocks to match new order after animations
              setTimeout(() => {
                const allClocks = Array.from(clocksContainer.querySelectorAll('.clock-wrapper:not(.slide-out)'));
                const orderedClocks = [];
                
                data.results.forEach(result => {
                  const clock = allClocks.find(c => c.dataset.city === result.city.toLowerCase());
                  if (clock) {
                    orderedClocks.push(clock);
                  }
                });
                
                // Clear and re-append in correct order
                orderedClocks.forEach(clock => {
                  clock.classList.add('reordering');
                  clocksContainer.appendChild(clock);
                });
              }, 100);
              
              currentCities = newCities;
            }
            
            // Update URL without reload
            window.history.pushState({}, '', `/?query=${encodeURIComponent(query)}`);
          }
        })
        .catch(error => {
          console.error('Search error:', error);
          const errorDiv = document.createElement('div');
          errorDiv.className = 'error-message';
          errorDiv.textContent = 'ERROR: Failed to process request';
          const inputSection = document.querySelector('.input-section');
          inputSection.insertAdjacentElement('afterend', errorDiv);
        });
      }
      
      // Handle form submission
      if (form) {
        form.addEventListener('submit', function(e) {
          e.preventDefault();
          performSearch(queryInput.value);
        });
      }
      
      // Handle Enter key in input
      if (queryInput) {
        queryInput.addEventListener('keypress', function(e) {
          if (e.key === 'Enter') {
            e.preventDefault();
            performSearch(this.value);
          }
        });
      }
      
      // Handle example clicks
      const exampleLinks = document.querySelectorAll('.example-link');
      exampleLinks.forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          const query = this.getAttribute('data-query');
          queryInput.value = query;
          performSearch(query);
        });
      });
    });
  </script>
</body>
</html>